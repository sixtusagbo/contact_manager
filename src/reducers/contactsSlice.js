import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  contacts: null,
  status: 'idle',
  error: null,
};

export const getContacts = createAsyncThunk(
  'contacts/getContacts',
  async () => {
    const res = await axios.get('https://jsonplaceholder.typicode.com/usersi');

    return res.data.map(contact => {
      return {
        id: contact.id,
        name: contact.name,
        email: contact.email,
        phone: contact.phone,
      };
    });
  }
);

const contactsSlice = createSlice({
  name: 'contacts',
  initialState,
  reducers: {
    addContact(state, action) {
      return {
        ...state,
        contacts: [action.payload, ...state.contacts],
      };
    },
    deleteContact(state, action) {
      return {
        ...state,
        contacts: state.contacts.filter(
          contact => contact.id !== action.payload
        ),
      };
    },
  },
  extraReducers: builder => {
    builder
      .addCase(getContacts.pending, state => {
        /**
         * [Immer - German for always](https://immerjs.github.io/immer) does the
         * immutability heavy lifting for me.
         */
        state.status = 'loading';
      })
      .addCase(getContacts.fulfilled, (state, action) => {
        state.status = 'successful';
        state.contacts = action.payload;
      })
      .addCase(getContacts.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

// Contacts selector
export const selectContacts = state => state.contacts.contacts;

// Action creators autogenerated for me
export const { addContact, deleteContact } = contactsSlice.actions;

export default contactsSlice.reducer;
